<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星期八</title>
  <subtitle>愿世界和平</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.nierunjie.site/"/>
  <updated>2017-07-04T09:41:34.360Z</updated>
  <id>https://www.nierunjie.site/</id>
  
  <author>
    <name>Rigel</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式实验报告</title>
    <link href="https://www.nierunjie.site/2017/07/02/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
    <id>https://www.nierunjie.site/2017/07/02/设计模式实验报告/</id>
    <published>2017-07-02T06:58:39.000Z</published>
    <updated>2017-07-04T09:41:34.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验报告一"><a href="#实验报告一" class="headerlink" title="实验报告一"></a>实验报告一</h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>OutPutStream中有抽象方法public abstract void write(int b) throws IOException;从OutPutStream继承的类内部有OutPutStream的对象,并实现write()该方法;现在只需要创建一个与其他实现类同一等级的类,重写write方法,实现加密</p>
<h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p><img src="/2017/07/02/设计模式实验报告/io.png" alt="io"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> decorate;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.io.IOException;</div><div class="line"><span class="keyword">import</span> java.io.OutputStream;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EncryptOutputStream</span> <span class="keyword">extends</span> <span class="title">OutputStream</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> OutputStream os = <span class="keyword">null</span>;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EncryptOutputStream</span><span class="params">(OutputStream os)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.os=os;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> IOException</span>&#123;</div><div class="line">        a=(a+<span class="number">2</span>-<span class="number">97</span>)%<span class="number">26</span>+<span class="number">97</span>;</div><div class="line">        <span class="keyword">this</span>.os.write(a);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>优点:<br>直接扩展OutPutStream类(装饰模式中的    Component),就可以添加新的功能</li>
<li><p>缺点：<br>每添加一个功能,就创建一个对象,如果多层装饰,则中间会产生用不到的对象</p>
</li>
<li><p>遇到的问题:<br>一开始用if语句计算a的过程太丑了,改成了现在的样子a=(a+2-97)%26+97;</p>
</li>
</ul>
<h2 id="实验报告二"><a href="#实验报告二" class="headerlink" title="实验报告二"></a>实验报告二</h2><h3 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h3><p>用备忘录模式实现悔棋操作:<br>发起人有当前的状态,即棋子的种类和位置,还有保存和恢复两个方法;<br>备忘录保存发起人的部分状态,在本题里保存了全部状态;<br>考虑到悔棋可能随时发生,则需要保存所有的状态,后发生的先撤销,符合栈后进先出的原则,故管理者用栈维护保存备;<br>原本的备忘录模式,需要备份的操作写在客户端,考虑到多次连续悔棋,将移动棋子和悔棋单独封装到一个类,客户端只需要调用该类进行移动和悔棋,具体操作在该类实现</p>
<h3 id="UML-1"><a href="#UML-1" class="headerlink" title="UML"></a>UML</h3><p><img src="/2017/07/02/设计模式实验报告/chess.png" alt="chess"></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> chess;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Stack;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MementoCaretaker</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Stack&lt;ChessMemento&gt; stack = <span class="keyword">new</span> Stack&lt;ChessMemento&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 考虑到悔棋可能随时存在,所以用栈保存每一步操作,每次悔棋栈顶元素出栈, 返回出栈后栈的顶元素</div><div class="line">     * </div><div class="line">     * 即返回当前状态的上一个状态并删除当前状态</div><div class="line">     **/</div><div class="line">    <span class="function"><span class="keyword">public</span> ChessMemento <span class="title">getMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!stack.isEmpty()) &#123;</div><div class="line">            stack.pop();</div><div class="line">            <span class="keyword">return</span> stack.peek();</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(ChessMemento chessMemento)</span> </span>&#123;</div><div class="line">        stack.push(chessMemento);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> chess;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用外观模式封装移动和撤销,简化客户端调用</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChessGame</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MementoCaretaker mementoCaretaker = <span class="keyword">null</span>;</div><div class="line">    <span class="keyword">private</span> Chessman chessman = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChessGame</span><span class="params">()</span> </span>&#123;</div><div class="line">        mementoCaretaker = <span class="keyword">new</span> MementoCaretaker();</div><div class="line">        chessman = <span class="keyword">new</span> Chessman();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 移动棋子时,通过备忘录保存当前状态</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(String label, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">        chessman.setLabel(label);</div><div class="line">        chessman.setLocate(x, y);</div><div class="line">        chessman.show();</div><div class="line">        mementoCaretaker.setMemento(chessman.save());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 从备忘录获取上一个状态,并赋值</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"悔棋"</span>);</div><div class="line">        chessman.restore(mementoCaretaker.getMemento());</div><div class="line">        chessman.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> chess;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 客户端只有移动棋子和撤销的方法,实现过程对客户端透明</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ChessGame chessGame =<span class="keyword">new</span> ChessGame();</div><div class="line">        chessGame.setInfo(<span class="string">"車"</span>,<span class="number">1</span>, <span class="number">1</span>);</div><div class="line">        chessGame.setInfo(<span class="string">"車"</span>,<span class="number">2</span>, <span class="number">1</span>);</div><div class="line">        chessGame.setInfo(<span class="string">"車"</span>,<span class="number">3</span>, <span class="number">1</span>);</div><div class="line">        chessGame.restore();</div><div class="line">        chessGame.setInfo(<span class="string">"馬"</span>,<span class="number">4</span>, <span class="number">1</span>);</div><div class="line">        chessGame.setInfo(<span class="string">"象"</span>,<span class="number">5</span>, <span class="number">1</span>);</div><div class="line">        chessGame.restore();</div><div class="line">        chessGame.setInfo(<span class="string">"車"</span>,<span class="number">6</span>, <span class="number">1</span>);</div><div class="line">        chessGame.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul>
<li><p>优点:<br>1.给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。<br>2.实现了信息的封装，使得用户不需要关心状态的保存细节。</p>
</li>
<li>缺点：<br>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</li>
<li>遇到的问题:图好难画</li>
</ul>
<h2 id="实验报告三"><a href="#实验报告三" class="headerlink" title="实验报告三"></a>实验报告三</h2><h3 id="题目分析-2"><a href="#题目分析-2" class="headerlink" title="题目分析"></a>题目分析</h3><p>反射+配置文件创建产品族,可以从配置文件读取数据库类型,也可以直接从配置文件读取反射所需要的字符串,此处选择后者</p>
<h3 id="UML-2"><a href="#UML-2" class="headerlink" title="UML"></a>UML</h3><p><img src="/2017/07/02/设计模式实验报告/reflect.png" alt="reflect"></p>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 配置文件</span></div><div class="line"><span class="comment">// USER=reflect.OracleUser</span></div><div class="line"><span class="comment">// DEPARTMENT=reflect.OracleDepartment</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> reflect;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Properties;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectFactory</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String USER;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String DEPARTMENT;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">// 读取配置文件</span></div><div class="line">            properties.load(ReflectFactory.class.getResourceAsStream(<span class="string">"dbinfo.properties"</span>));</div><div class="line">            <span class="comment">// 配置文件中USER和DEPARTMENT均为类的位置</span></div><div class="line">            USER = properties.getProperty(<span class="string">"USER"</span>);</div><div class="line">            DEPARTMENT = properties.getProperty(<span class="string">"DEPARTMENT"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(properties);</div><div class="line">            System.out.println(USER);</div><div class="line">            System.out.println(DEPARTMENT);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IUser <span class="title">createUser</span><span class="params">()</span> </span>&#123;</div><div class="line">        IUser user = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            user = (IUser) Class.forName(USER).newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(<span class="string">"创建IUser对象失败"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> IDepartment <span class="title">createDepartment</span><span class="params">()</span> </span>&#123;</div><div class="line">        IDepartment department = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            department = (IDepartment) Class.forName(DEPARTMENT).newInstance();</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            System.out.println(<span class="string">"创建IDepartment对象失败"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> department;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul>
<li>优点:<br>工厂模式优点:支持产品族扩展<br>反射+配置文件优点:减轻了所有工厂模式中工厂角色的复杂性,创建新产品,只需要扩展产品类,修改配置文件</li>
<li>缺点：<br>抽象工厂缺点:不支持等级结构扩展<br>反射+配置文件缺点:速度慢</li>
<li>遇到的问题:<br>读取配置文件不明原因造成的空指针异常</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;实验报告一&quot;&gt;&lt;a href=&quot;#实验报告一&quot; class=&quot;headerlink&quot; title=&quot;实验报告一&quot;&gt;&lt;/a&gt;实验报告一&lt;/h2&gt;&lt;h3 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="作业" scheme="https://www.nierunjie.site/tags/%E4%BD%9C%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>大佬们的黑话</title>
    <link href="https://www.nierunjie.site/2017/07/02/%E5%A4%A7%E4%BD%AC%E4%BB%AC%E7%9A%84%E9%BB%91%E8%AF%9D/"/>
    <id>https://www.nierunjie.site/2017/07/02/大佬们的黑话/</id>
    <published>2017-07-02T02:51:18.000Z</published>
    <updated>2017-07-02T03:32:41.832Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>GTFO: Get The Fuxxing Out</li>
<li>RTFM: Read The Fuxxing Manual</li>
<li>STFW: Search The Fuxxing Web</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;GTFO: Get The Fuxxing Out&lt;/li&gt;
&lt;li&gt;RTFM: Read The Fuxxing Manual&lt;/li&gt;
&lt;li&gt;STFW: Search The Fuxxing Web&lt;/li&gt;
&lt;/ul&gt;

    
    </summary>
    
      <category term="Default" scheme="https://www.nierunjie.site/categories/Default/"/>
    
    
      <category term="Default" scheme="https://www.nierunjie.site/tags/Default/"/>
    
  </entry>
  
  <entry>
    <title>Java考试技巧</title>
    <link href="https://www.nierunjie.site/2017/06/30/Java%E8%80%83%E8%AF%95%E6%8A%80%E5%B7%A7/"/>
    <id>https://www.nierunjie.site/2017/06/30/Java考试技巧/</id>
    <published>2017-06-30T07:31:00.000Z</published>
    <updated>2017-06-30T07:37:47.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java阅卷标准"><a href="#java阅卷标准" class="headerlink" title="java阅卷标准"></a>java阅卷标准</h2><p>看心情</p>
<h2 id="高分方法"><a href="#高分方法" class="headerlink" title="高分方法"></a>高分方法</h2><p>上柱香祈祷吧</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;java阅卷标准&quot;&gt;&lt;a href=&quot;#java阅卷标准&quot; class=&quot;headerlink&quot; title=&quot;java阅卷标准&quot;&gt;&lt;/a&gt;java阅卷标准&lt;/h2&gt;&lt;p&gt;看心情&lt;/p&gt;
&lt;h2 id=&quot;高分方法&quot;&gt;&lt;a href=&quot;#高分方法&quot; class=&quot;h
    
    </summary>
    
      <category term="杂谈" scheme="https://www.nierunjie.site/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="星相占卜" scheme="https://www.nierunjie.site/tags/%E6%98%9F%E7%9B%B8%E5%8D%A0%E5%8D%9C/"/>
    
  </entry>
  
  <entry>
    <title>对于Hibernate后第二次唤醒出现GRUB菜单的探究</title>
    <link href="https://www.nierunjie.site/2017/06/12/%E5%AF%B9%E4%BA%8EHibernate%E5%90%8E%E7%AC%AC%E4%BA%8C%E6%AC%A1%E5%94%A4%E9%86%92%E5%87%BA%E7%8E%B0GRUB%E8%8F%9C%E5%8D%95%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
    <id>https://www.nierunjie.site/2017/06/12/对于Hibernate后第二次唤醒出现GRUB菜单的探究/</id>
    <published>2017-06-12T15:47:33.000Z</published>
    <updated>2017-06-30T07:44:46.244Z</updated>
    
    <content type="html"><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul>
<li>Kernel 4.10.0-generic</li>
<li>Memory 3.8G</li>
<li>Swap 4.2G</li>
<li>GRUB2</li>
<li>/etc/default/grub<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">GRUB_DEFAULT=0</div><div class="line">GRUB_TIMEOUT=0</div><div class="line">GRUB_HIDDEN_TIMEOUT=0</div><div class="line">GRUB_HIDDEN_TIMEOUT_QUIET=true</div><div class="line">GRUB_DISTRIBUTOR=`lsb_release -i -s 2&gt; /dev/null || echo Debian`</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ol>
<li>Hibernate,第一次正常唤醒</li>
<li>再次Hibernate,第二次唤醒,出现GRUB菜单,且倒计时为30秒</li>
</ol>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h3 id="肤浅的解决办法"><a href="#肤浅的解决办法" class="headerlink" title="肤浅的解决办法"></a>肤浅的解决办法</h3><ul>
<li>直接修改/boot/grub/grub.cfg<ol>
<li>给文件添加写权限</li>
<li>将第86行的timeout=30改为timeout=0</li>
</ol>
</li>
</ul>
<h3 id="稍微明智的解决办法"><a href="#稍微明智的解决办法" class="headerlink" title="稍微明智的解决办法"></a>稍微明智的解决办法</h3><ul>
<li>修改/etc/default/grub<ol>
<li>添加<code>GRUB_RECORDFAIL_TIMEOUT=0</code></li>
</ol>
</li>
</ul>
<h3 id="梦想中的解决办法"><a href="#梦想中的解决办法" class="headerlink" title="梦想中的解决办法"></a>梦想中的解决办法</h3><ul>
<li>解决将Hibernate判断为异常断电的问题</li>
</ul>
<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><ul>
<li><p>源码</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if [ "$&#123;recordfail&#125;" = 1 ] ; then</div><div class="line">    set timeout=30</div></pre></td></tr></table></figure>
</li>
<li><p>出现异常断电的时候,recordfail会被设置为1,从异常断电中重启系统,显示grub菜单是个合理的设计,但是不明白,为什么第二次Hibernate会被识别为异常断电</p>
</li>
<li>直接设置timeout=0,在正常情况下没有问题,一旦系统真的出了问题就是个大问题,这是一种肤浅且不安全的设置方法,但目前为止还没有找到更合适的方法进行设置</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="http://blog.csdn.net/ppp2006/article/details/42098677" target="_blank" rel="external">grub恢复recordfail</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h2&gt;&lt;h3 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h3&gt;&lt;ul&gt;
&lt;
    
    </summary>
    
      <category term="Linux" scheme="https://www.nierunjie.site/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://www.nierunjie.site/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>归并排序</title>
    <link href="https://www.nierunjie.site/2017/06/08/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
    <id>https://www.nierunjie.site/2017/06/08/归并排序/</id>
    <published>2017-06-08T13:35:00.000Z</published>
    <updated>2017-06-30T07:43:13.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><ul>
<li>MergeSort<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="comment">// 将数组a拆分成start到mid 和 mid+1到end 两部分</span></div><div class="line"><span class="comment">// 这两部分均有序</span></div><div class="line"><span class="comment">// 将这两部分合并成一个有序的数组</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> start,<span class="keyword">int</span> mid,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 创建临时空间,大小为数组a的大小</span></div><div class="line">    <span class="keyword">int</span> *temp = <span class="keyword">new</span> <span class="keyword">int</span>[end-start+<span class="number">1</span>];</div><div class="line">    <span class="comment">// i 为前半个数组的索引</span></div><div class="line">    <span class="keyword">int</span> i=start;</div><div class="line">    <span class="comment">// j 为后半个数组的索引</span></div><div class="line">    <span class="keyword">int</span> j=mid+<span class="number">1</span>;</div><div class="line">    <span class="comment">// k为临时空间temp的索引</span></div><div class="line">    <span class="keyword">int</span> k=<span class="number">0</span>;</div><div class="line"></div><div class="line">    <span class="comment">// 3个循环为具体合并过程</span></div><div class="line">    <span class="keyword">while</span>(i&lt;=mid &amp;&amp; j&lt;=end)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(a[i]&lt;=a[j])</div><div class="line">            temp[k++]=a[i++];</div><div class="line">        <span class="keyword">else</span></div><div class="line">            temp[k++]=a[j++];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">while</span>(i&lt;=mid)</div><div class="line">        temp[k++]=a[i++];</div><div class="line">    <span class="keyword">while</span>(j&lt;=end)</div><div class="line">        temp[k++]=a[j++];</div><div class="line">    </div><div class="line">    <span class="comment">// 把临时空间的内容放回到a数组</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;k;i++)</div><div class="line">        a[start+i]=temp[i];</div><div class="line">    </div><div class="line">    <span class="comment">// 删除临时空间</span></div><div class="line">    <span class="keyword">delete</span> []temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 空数组直接返回</span></div><div class="line">    <span class="comment">// start&gt;end 是错误的输入</span></div><div class="line">    <span class="comment">// start=end 表示数组中只有一个元素需要排序,</span></div><div class="line">    <span class="comment">// 是递归退出的条件</span></div><div class="line">    <span class="keyword">if</span>(a==<span class="literal">NULL</span> || start&gt;=end)</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 分割数组,如果数组待排序个数大于1就继续分割</span></div><div class="line">    <span class="comment">// 只有一个元素可以视为有序</span></div><div class="line">    <span class="keyword">int</span> mid=(end+start)/<span class="number">2</span>;</div><div class="line">    merge_sort(a,start,mid);</div><div class="line">    merge_sort(a,mid+<span class="number">1</span>,end);</div><div class="line"></div><div class="line">    <span class="comment">// 将有序数组进行合并</span></div><div class="line">    merge(a,start,mid,end);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 输出数组,不属于归并排序,可忽略</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_array</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a[]=&#123;<span class="number">-20</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">3</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">-10</span>&#125;;</div><div class="line">    print_array(a,<span class="number">0</span>,<span class="number">7</span>);</div><div class="line">    merge_sort(a,<span class="number">0</span>,<span class="number">7</span>);</div><div class="line">    print_array(a,<span class="number">0</span>,<span class="number">7</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;归并排序&quot;&gt;&lt;a href=&quot;#归并排序&quot; class=&quot;headerlink&quot; title=&quot;归并排序&quot;&gt;&lt;/a&gt;归并排序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;MergeSort&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.nierunjie.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.nierunjie.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="https://www.nierunjie.site/2017/06/05/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>https://www.nierunjie.site/2017/06/05/快速排序/</id>
    <published>2017-06-05T13:52:50.000Z</published>
    <updated>2017-06-30T07:47:06.019Z</updated>
    
    <content type="html"><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><ul>
<li>QuickSort.cpp<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp=a;</div><div class="line">    a=b;</div><div class="line">    b=temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 参数:</div><div class="line"> * r[]为待排序数组</div><div class="line"> * first,end为索引</div><div class="line"> *</div><div class="line"> * 说明:</div><div class="line"> * 此函数将待排数组以第一个元素为标准</div><div class="line"> * 分为两部分,小的在该元素前,大的在该元素后</div><div class="line"> * 并返回最后该元素的位置</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> first,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> i = first;</div><div class="line">    <span class="keyword">int</span> j = end;</div><div class="line">    <span class="keyword">while</span>(i&lt;j)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">while</span>(i&lt;j &amp;&amp; r[i]&lt;=r[j]) j--;</div><div class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</div><div class="line">            swap(r[i],r[j]);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(i&lt;j &amp;&amp; r[i]&lt;=r[j]) i++;</div><div class="line">        <span class="keyword">if</span>(i&lt;j)&#123;</div><div class="line">            swap(r[i],r[j]);</div><div class="line">            j--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> i;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line"> * 说明:</div><div class="line"> * 递归调用排序算法</div><div class="line"> *</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> first,<span class="keyword">int</span> end)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(first&lt;end)&#123;</div><div class="line">        <span class="keyword">int</span> pivot = Partition(r,first,end);</div><div class="line">        QuickSort(r,first,pivot<span class="number">-1</span>);</div><div class="line">        QuickSort(r,pivot+<span class="number">1</span>,end);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">15</span>,<span class="number">-4</span>,<span class="number">3</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">55</span>&#125;;</div><div class="line">    </div><div class="line">    <span class="comment">// 数组a的索引从0到5,</span></div><div class="line">    QuickSort(a,<span class="number">0</span>,<span class="number">5</span>);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">5</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">'\t'</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;快速排序&quot;&gt;&lt;a href=&quot;#快速排序&quot; class=&quot;headerlink&quot; title=&quot;快速排序&quot;&gt;&lt;/a&gt;快速排序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;QuickSort.cpp&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.nierunjie.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.nierunjie.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>堆排序</title>
    <link href="https://www.nierunjie.site/2017/06/05/%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
    <id>https://www.nierunjie.site/2017/06/05/堆排序/</id>
    <published>2017-06-05T11:31:56.000Z</published>
    <updated>2017-06-30T07:48:05.919Z</updated>
    
    <content type="html"><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><ul>
<li>HeapSort.cpp<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> &amp;a,<span class="keyword">int</span> &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> temp=a;</div><div class="line">    a=b;</div><div class="line">    b=temp;</div><div class="line">&#125;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * 说明:</div><div class="line"> * 大根堆,即跟必须为最大的节点</div><div class="line"> * </div><div class="line"> * 应用条件:</div><div class="line"> * 除了被筛选节点和其左右儿子,该节点子树均为大根堆</div><div class="line"> *</div><div class="line"> * 参数:</div><div class="line"> * r[] 为待调整数组</div><div class="line"> * k 为被筛选的节点,从k,2k,2k+1中寻找最大值放在k的位置</div><div class="line"> * m 为需要进行筛选的二叉堆的节点个数</div><div class="line"> * */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sift</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> k,<span class="keyword">int</span> m)</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> i = k;</div><div class="line">    <span class="keyword">int</span> j=<span class="number">2</span>*i;</div><div class="line">    <span class="keyword">while</span>(j&lt;=m)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// j 定位到值最大的儿子</span></div><div class="line">        <span class="keyword">if</span>(j+<span class="number">1</span>&lt;=m &amp;&amp; r[j<span class="number">-1</span>]&lt;r[j]) j++;  </div><div class="line"></div><div class="line">        <span class="comment">// j 位置的值比 i 位置的小</span></div><div class="line">        <span class="comment">// 为大根堆,不需要调整</span></div><div class="line">        <span class="keyword">if</span>(r[j<span class="number">-1</span>]&lt;r[i<span class="number">-1</span>]) <span class="keyword">break</span>;    </div><div class="line"></div><div class="line">        <span class="comment">// 否则交换位置</span></div><div class="line">        <span class="keyword">else</span>&#123;</div><div class="line">            swap(r[j<span class="number">-1</span>],r[i<span class="number">-1</span>]);</div><div class="line"></div><div class="line">            <span class="comment">// 交换位置导致原本子树的大根堆被破坏</span></div><div class="line">            <span class="comment">// 所以要对该子树进行调整</span></div><div class="line">            i=j;</div><div class="line">            j=<span class="number">2</span>*i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 说明:</div><div class="line"> * 堆排序</div><div class="line"> *</div><div class="line"> * 参数:</div><div class="line"> * r[] 为被排序数组,n为数组元素个数</div><div class="line"> * */</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">HeapSort</span><span class="params">(<span class="keyword">int</span> r[],<span class="keyword">int</span> n)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 由于Sift的应用条件是,i节点的子树必须为大根堆,</span></div><div class="line">        <span class="comment">// 所以从最后一个树开始,倒序至根节点</span></div><div class="line">        <span class="comment">// 循环结束后,跟节点为最大值</span></div><div class="line">        Sift(r,i,n);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">1</span>;i&lt;n;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 交换第一个节点和最后一个节点</span></div><div class="line">        swap(r[<span class="number">0</span>],r[n-i]);</div><div class="line">        <span class="comment">// 此时最后一个节点为最大值</span></div><div class="line">        <span class="comment">// 开始循环后</span></div><div class="line">        <span class="comment">// 待排序的最大值总被放到待排序数组的最后</span></div><div class="line">        </div><div class="line">        <span class="comment">// 每次只有根节点不是最大堆,所以交换位置后只需从跟节点开始调整一次</span></div><div class="line">        Sift(r,<span class="number">1</span>,n-i);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> t=<span class="number">8</span>;</div><div class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">9</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">10</span>&#125;;</div><div class="line">    HeapSort(a,t);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;t;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;堆排序&quot;&gt;&lt;a href=&quot;#堆排序&quot; class=&quot;headerlink&quot; title=&quot;堆排序&quot;&gt;&lt;/a&gt;堆排序&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;HeapSort.cpp&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://www.nierunjie.site/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="数据结构与算法" scheme="https://www.nierunjie.site/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Mediator Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/02/Mediator-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/02/Mediator-Pattern/</id>
    <published>2017-06-02T03:04:32.000Z</published>
    <updated>2017-06-30T07:57:15.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</li>
<li>主要解决：对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</li>
<li>何时使用：多个类相互耦合，形成了网状结构。</li>
<li>如何解决：将上述网状结构分离为星型结构。</li>
<li>关键代码：对象 Colleague 之间的通信封装到一个类中单独处理。</li>
<li>应用实例： 1、中国加入 WTO 之前是各个国家相互贸易，结构复杂，现在是各个国家通过 WTO 来互相贸易。 2、机场调度系统。 3、MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</li>
<li>优点： 1、降低了类的复杂度，将一对多转化成了一对一。 2、各个类之间的解耦。 3、符合迪米特原则。</li>
<li>缺点：中介者会庞大，变得复杂难以维护。</li>
<li>使用场景： 1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。 2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li>
<li>注意事项：不应当在职责混乱的时候使用。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><ul>
<li><p>UML图<br><img src="/2017/06/02/Mediator-Pattern/Mediator.png" alt="中介者模式"></p>
</li>
<li><p>主类测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mediator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		<span class="comment">// 创建中介者</span></div><div class="line">		ConcreteMediator m = <span class="keyword">new</span> ConcreteMediator();</div><div class="line"></div><div class="line">		<span class="comment">// 创建具体的同事,并关联中介者</span></div><div class="line">		ConcreteColleague1 c1 = <span class="keyword">new</span> ConcreteColleague1(m);</div><div class="line">		ConcreteColleague2 c2 = <span class="keyword">new</span> ConcreteColleague2(m);</div><div class="line"></div><div class="line">		<span class="comment">// 中介者维护两个同事</span></div><div class="line">		m.setColleague1(c1);</div><div class="line">		m.setColleague2(c2);</div><div class="line"></div><div class="line">		<span class="comment">// 通过中介者发送消息</span></div><div class="line">		c1.send(<span class="string">"哈哈"</span>);</div><div class="line">		c2.send(<span class="string">"吼吼"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Mediator</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mediator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">	<span class="comment">// 中介者类,接收发送消息的人和消息内容</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message,Colleague colleague)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Colleague</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mediator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">	<span class="comment">// 每个具体的同事需要认识一个中介者</span></div><div class="line">	<span class="comment">// 同事之间不需要认识</span></div><div class="line">	<span class="keyword">protected</span> Mediator mediator;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Colleague</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.mediator = mediator;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>CocreteColleague</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mediator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague1</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague1</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(mediator);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 消息发送给中介者</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		mediator.send(message, <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// 接收通知</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"同事1的得到消息:"</span> + message);</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> mediator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteColleague2</span> <span class="keyword">extends</span> <span class="title">Colleague</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ConcreteColleague2</span><span class="params">(Mediator mediator)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>(mediator);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		mediator.send(message, <span class="keyword">this</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">		System.out.println(<span class="string">"同事2的得到消息:"</span> + message);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteMediator</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> mediator;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteMediator</span> <span class="keyword">extends</span> <span class="title">Mediator</span> </span>&#123;</div><div class="line">	<span class="comment">// 中介者类降低了同事之间的耦合度</span></div><div class="line">	<span class="comment">// 但是增加了中介者类负担</span></div><div class="line">	<span class="comment">// 这个类只是为了体现中介者负责调度两个类之间的关系</span></div><div class="line">	</div><div class="line">	<span class="comment">// 具体中介者,有两个具体同事的引用</span></div><div class="line">	<span class="keyword">private</span> ConcreteColleague1 colleague1;</div><div class="line">	<span class="keyword">private</span> ConcreteColleague2 colleague2;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague1</span><span class="params">(ConcreteColleague1 colleague1)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.colleague1 = colleague1;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleague2</span><span class="params">(ConcreteColleague2 colleague2)</span> </span>&#123;</div><div class="line">		<span class="keyword">this</span>.colleague2 = colleague2;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String message, Colleague colleague)</span> </span>&#123;</div><div class="line">		<span class="comment">// 同事1发出的内容直接通知给同事2</span></div><div class="line">		<span class="keyword">if</span> (colleague == colleague1) &#123;</div><div class="line">			colleague2.notify(message);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			colleague1.notify(message);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;中介者模式&quot;&gt;&lt;a href=&quot;#中介者模式&quot; class=&quot;headerlink&quot; title=&quot;中介者模式&quot;&gt;&lt;/a&gt;中介者模式&lt;/h2&gt;&lt;p&gt;中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个中介类，该类
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Command Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/02/Command-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/02/Command-Pattern/</id>
    <published>2017-06-02T03:02:25.000Z</published>
    <updated>2017-06-30T07:54:03.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</li>
<li>主要解决：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</li>
<li>何时使用：在某些场合，比如要对行为进行”记录、撤销/重做、事务”等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</li>
<li>如何解决：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</li>
<li>关键代码：定义三个角色：1、received 真正的命令执行对象 2、Command 3、invoker 使用命令对象的入口</li>
<li>应用实例：struts 1 中的 action 核心控制器 ActionServlet 只有一个，相当于 Invoker，而模型层的类会随着不同的应用有不同的模型类，相当于具体的 Command。</li>
<li>优点： 1、降低了系统耦合度。 2、新的命令可以很容易添加到系统中去。</li>
<li>缺点：使用命令模式可能会导致某些系统有过多的具体命令类。</li>
<li>使用场景：认为是命令的地方都可以使用命令模式，比如： 1、GUI 中每一个按钮都是一条命令。 2、模拟 CMD。</li>
<li>注意事项：系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式，见命令模式的扩展。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><ul>
<li><p>UML图<br><img src="/2017/06/02/Command-Pattern/Command.png" alt="命令模式"></p>
</li>
<li><p>测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> command;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 负责接收请求,</span></div><div class="line">        <span class="comment">// 如果抽象Receiver,可以创建多个请求接收者</span></div><div class="line">        Receiver r = <span class="keyword">new</span> Receiver();</div><div class="line"></div><div class="line">        <span class="comment">// 创建(多种)命令,将命令交给r执行</span></div><div class="line">        <span class="comment">// 每种命令对应一个实现Command接口的类</span></div><div class="line">        <span class="comment">// 每个命令可以调用不同的Receiver对象</span></div><div class="line">        Command c = <span class="keyword">new</span> ConcreteCommand(r);</div><div class="line"></div><div class="line">        <span class="comment">// i 负责记录 c 命令,并执行命令</span></div><div class="line">        Invoker i = <span class="keyword">new</span> Invoker();</div><div class="line">        i.setCommand(c);</div><div class="line">        i.ExecuteCommand();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Receiver</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> command;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Action</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"执行请求!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Command</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> command;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Receiver receiver;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Command</span><span class="params">(Receiver receiver)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.receiver = receiver;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteCommand</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> command;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteCommand</span><span class="params">(Receiver receiver)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(receiver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span><span class="params">()</span> </span>&#123;</div><div class="line">        receiver.Action();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Invoker</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> command;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Invoker</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Command command;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(Command command)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.command = command;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ExecuteCommand</span><span class="params">()</span></span>&#123;</div><div class="line">        command.Execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot;命令模式&quot;&gt;&lt;/a&gt;命令模式&lt;/h2&gt;&lt;p&gt;命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Visitor Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Visitor-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Visitor-Pattern/</id>
    <published>2017-06-01T04:53:41.000Z</published>
    <updated>2017-06-30T07:53:19.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h2><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：主要将数据结构与数据操作分离。</li>
<li>主要解决：稳定的数据结构和易变的操作耦合问题。</li>
<li>何时使用：需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。</li>
<li>如何解决：在被访问的类里面加一个对外提供接待访问者的接口。</li>
<li>关键代码：在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。</li>
<li>应用实例：您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</li>
<li>优点： 1、符合单一职责原则。 2、优秀的扩展性。 3、灵活性。</li>
<li>缺点： 1、具体元素对访问者公布细节，违反了迪米特原则。 2、具体元素变更比较困难。 3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</li>
<li>使用场景： 1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。 2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。</li>
<li>注意事项：访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2></li>
<li><p>UML图<br><img src="/2017/06/01/Visitor-Pattern/Visitor.png" alt="访问者模式"></p>
</li>
<li><p>主类测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        ObjectStructure o = <span class="keyword">new</span> ObjectStructure();</div><div class="line">        o.attach(<span class="keyword">new</span> ConcreteElementA());</div><div class="line">        o.attach(<span class="keyword">new</span> ConcreteElementB());</div><div class="line"></div><div class="line">        ConcreteVisitor1 v1 = <span class="keyword">new</span> ConcreteVisitor1();</div><div class="line">        ConcreteVisitor2 v2 = <span class="keyword">new</span> ConcreteVisitor2();</div><div class="line"></div><div class="line">        o.accpet(v1);</div><div class="line">        <span class="comment">// ConcreteElementA被ConcreteVisitor1访问</span></div><div class="line">        <span class="comment">// ConcreteElementB被ConcreteVisitor1访问</span></div><div class="line">        o.accpet(v2);</div><div class="line">        <span class="comment">// ConcreteElementA被ConcreteVisitor2访问</span></div><div class="line">        <span class="comment">// ConcreteElementB被ConcreteVisitor2访问</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Element</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Element</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteElement</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementA</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        visitor.visitConcreteElementA(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opterationA</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteElementB</span> <span class="keyword">extends</span> <span class="title">Element</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Visitor visitor)</span> </span>&#123;</div><div class="line">        visitor.visitConcreteElementB(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">opterationB</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Visitor</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visitConcreteElementA</span><span class="params">(ConcreteElementA concreteElementA)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">visitConcreteElementB</span><span class="params">(ConcreteElementB concreteElementB)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteVisitor</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor1</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementA</span><span class="params">(ConcreteElementA concreteElementA)</span> </span>&#123;</div><div class="line">        System.out.println(concreteElementA.getClass().getSimpleName() + <span class="string">"被"</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">"访问"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementB</span><span class="params">(ConcreteElementB concreteElementB)</span> </span>&#123;</div><div class="line">        System.out.println(concreteElementB.getClass().getSimpleName() + <span class="string">"被"</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">"访问"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteVisitor2</span> <span class="keyword">extends</span> <span class="title">Visitor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementA</span><span class="params">(ConcreteElementA concreteElementA)</span> </span>&#123;</div><div class="line">        System.out.println(concreteElementA.getClass().getSimpleName() + <span class="string">"被"</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">"访问"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">visitConcreteElementB</span><span class="params">(ConcreteElementB concreteElementB)</span> </span>&#123;</div><div class="line">        System.out.println(concreteElementB.getClass().getSimpleName() + <span class="string">"被"</span> + <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">"访问"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ObjectStructure</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> visitor;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Vector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Vector&lt;Element&gt; elements = <span class="keyword">new</span> Vector&lt;Element&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Element element)</span></span>&#123;</div><div class="line">        elements.add(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Element element)</span></span>&#123;</div><div class="line">        elements.remove(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accpet</span><span class="params">(Visitor visitor)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span>(Element element : elements)&#123;</div><div class="line">            element.accept(visitor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>感触颇深.访问者直接看结构略有复杂,那就一点点的拆看看.</p>
<ol>
<li><strong>不考虑扩展性</strong>,省略所有的抽象类,并直接用其子类中的一个代替(这里就体现了李氏代换原则).</li>
<li><strong>不考虑客户端的复杂性</strong>,直接在客户端调用ConcreteElement的accpet方法,可以省略掉ObjectStructure.</li>
<li><strong>不考虑操作与结构的紧耦合</strong>,将ConcreteElement中accpet方法直接在类中实现.</li>
<li>至此,就只剩下一个ConcreteElement,该类描述了数据结构,并实现所有的操作,这是像我等新手常写的代码.</li>
</ol>
<p>现在把上面的过程反过来</p>
<ol>
<li>有一个具体类,描述了数据结构和所有操作,为了<strong>降低操作和结构的耦合性,易于对操作进行修改</strong>,将操作从类中抽取出来,形成Operator类(一会解释为什么不是Visitor类),并将含数据结构的类命名为Eletment.</li>
<li>将Element实现操作的方法命名为accept(Operator operator),在operator中传入this,调用<strong>可选的</strong>具体方法进行操作.</li>
<li>为了让Operator知道是谁发来的操作请求,其方法OperateEletement(Eletement eletement)接受一个Element的对象,并对该对象中的数据进行操作.</li>
<li>至此,已经实现了<strong>操作与数据分离</strong>.</li>
<li>但是,操作不会只有一个,数据也不会只有一一种,抽象这两个类.Operator和Element都成为抽象类,并有对应的ConcreteOperator和ConcreteElement类</li>
<li>此时的Operator和Element还<strong>都</strong>可以随意扩展,但是扩展会增加客户端的压力</li>
<li>现在再来说<strong>访问者</strong>模式,顾名思义,要解决的问题是将所有的Element都访问一遍,并<strong>对每个对象进行不同的操作</strong>,既然每个具体Element都有其独有的操作,所以在Opertaor类中必须封装好对所有Element的操作,也就使得具体元素变更比较困难,于是就有了<strong>稳定的数据结构</strong>这个应用条件,并且每个具体的Operator都有了特定的操作.</li>
<li>可以将遍历所有Element的过程进行封装,从而形成ObjectStructure,至此,Operator提供所有Element的操作方法,不同的具体实现虽然方法不同,但进行处理的元素是特定的.Operator可以被改名为Visitor,并完成其访问工作</li>
<li>个人认为,是ObjectStructure的出现,限制了Operator的灵活性,但这正是<strong>访问者</strong>要做的事.</li>
</ol>
<p>假如不是访问者模式,仅仅是想将数据与操作分离.</p>
<ul>
<li>在客户端进行操作和数据的结合<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;	</div><div class="line">    ConcreteElementA e1 = <span class="keyword">new</span> ConcreteElementA();</div><div class="line">    ConcreteElementB e2 = <span class="keyword">new</span> ConcreteElementB();</div><div class="line"></div><div class="line">    ConcreteVisitor1 v1 = <span class="keyword">new</span> ConcreteVisitor1();</div><div class="line">    ConcreteVisitor2 v2 = <span class="keyword">new</span> ConcreteVisitor2();</div><div class="line"></div><div class="line">    e1.accept(v1);</div><div class="line">    e1.accept(v2);</div><div class="line">    e2.accept(v1);</div><div class="line">    e2.accept(v2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>此时的ConcreVisitor不局限于抽象类Visitor的限制,而Visitor也只需要提供一个对某一类数据进行操作的接口</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;访问者模式&quot;&gt;&lt;a href=&quot;#访问者模式&quot; class=&quot;headerlink&quot; title=&quot;访问者模式&quot;&gt;&lt;/a&gt;访问者模式&lt;/h2&gt;&lt;p&gt;在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Memento Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Memento-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Memento-Pattern/</id>
    <published>2017-06-01T04:53:29.000Z</published>
    <updated>2017-06-30T07:57:19.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h2><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。</li>
<li>主要解决：所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</li>
<li>何时使用：很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态，使得他有”后悔药”可吃。</li>
<li>如何解决：通过一个备忘录类专门存储对象状态。</li>
<li>关键代码：客户不与备忘录类耦合，与备忘录管理类耦合。</li>
<li>应用实例： 1、后悔药。 2、打游戏时的存档。 3、Windows 里的 ctri + z。 4、IE 中的后退。 4、数据库的事务管理。</li>
<li>优点： 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 2、实现了信息的封装，使得用户不需要关心状态的保存细节。</li>
<li>缺点：消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</li>
<li>使用场景： 1、需要保存/恢复数据的相关状态场景。 2、提供一个可回滚的操作。</li>
<li>注意事项： 1、为了符合迪米特原则，还要增加一个管理备忘录的类。 2、为了节约内存，可使用原型模式+备忘录模式。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><ul>
<li>UML图<br><img src="/2017/06/01/Memento-Pattern/Memento.png" alt="备忘录模式"></li>
</ul>
<hr>
<ul>
<li><p>主类测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> memento;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 备忘录对客户端透明,客户端只需要创建发起人和管理者的对象</div><div class="line">     * 如果备忘录修改所记录的内容</div><div class="line">     * 客户端不需要作出改变</div><div class="line">     * </div><div class="line">     * 发起人和备忘录之间是紧耦合的</div><div class="line">     * 如果备忘录修改所记录的内容</div><div class="line">     * 则需要修改备忘录和发起人</div><div class="line">     * 不符合开放封闭原则</div><div class="line">     * */</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建发起人对象,设置其状态并显示</span></div><div class="line">        Originator o = <span class="keyword">new</span> Originator();</div><div class="line">        o.setState(<span class="string">"On"</span>);</div><div class="line">        o.show();</div><div class="line"></div><div class="line">        <span class="comment">// 创建管理者对象,保存当前发起人状态</span></div><div class="line">        Caretaker c = <span class="keyword">new</span> Caretaker();</div><div class="line">        c.setMenento(o.createMemento());</div><div class="line"></div><div class="line">        <span class="comment">// 改变发起人状态,并显示</span></div><div class="line">        o.setState(<span class="string">"Off"</span>);</div><div class="line">        o.show();</div><div class="line"></div><div class="line">        <span class="comment">// 通过管理者,恢复发起人状态</span></div><div class="line">        o.setMemento(c.getMenento());</div><div class="line">        o.show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>发起人</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> memento;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Originator</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 发起人(Originator)</div><div class="line">     * state为属性,此处为了说明原理,只写一个属性,一般为多个</div><div class="line">     * get/set方法修改该属性</div><div class="line">     * crateMemento返回当前state</div><div class="line">     * setMemento(Memento memento)通过被保存的信息给state赋值</div><div class="line">     * */</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 创建备忘录,在备忘录中保存需要保存的信息(并非所有属性)</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Memento(state);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 依次获取备忘录中的信息并赋值</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMemento</span><span class="params">(Memento memento)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = memento.getState();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"State="</span> + <span class="keyword">this</span>.state);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>备忘录</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> memento;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 备忘录(Memento)</div><div class="line">     * 只保存Originator给出的需要保存的信息</div><div class="line">     * */</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="comment">// 通过一个构造函数获得状态的信息</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Memento</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 通过不同的get方法得到保存的所有信息</span></div><div class="line">    <span class="comment">// 此处用一个仅用get说明模式的用法</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getState</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> state;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>管理者</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> memento;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Caretaker</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 管理者类Caretaker</div><div class="line">     * 维护一个备忘录属性</div><div class="line">     * 仅有get和set方法</div><div class="line">     * */</div><div class="line">    <span class="keyword">private</span> Memento menento;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Memento <span class="title">getMenento</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> menento;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMenento</span><span class="params">(Memento menento)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.menento = menento;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;备忘录模式&quot;&gt;&lt;a href=&quot;#备忘录模式&quot; class=&quot;headerlink&quot; title=&quot;备忘录模式&quot;&gt;&lt;/a&gt;备忘录模式&lt;/h2&gt;&lt;p&gt;备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Iterator Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Iterator-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Iterator-Pattern/</id>
    <published>2017-06-01T04:53:11.000Z</published>
    <updated>2017-06-30T07:52:58.190Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br>迭代器模式属于行为型模式</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</li>
<li>主要解决：不同的方式来遍历整个整合对象。</li>
<li>何时使用：遍历一个聚合对象。</li>
<li>如何解决：把在元素之间游走的责任交给迭代器，而不是聚合对象。</li>
<li>关键代码：定义接口：hasNext, next。</li>
<li>应用实例：JAVA 中的 iterator。</li>
<li>优点： 1、它支持以不同的方式遍历一个聚合对象。 2、迭代器简化了聚合类。 3、在同一个聚合上可以有多个遍历。 4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li>
<li>缺点：由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</li>
<li>使用场景： 1、访问一个聚合对象的内容而无须暴露它的内部表示。 2、需要为聚合对象提供多种遍历方式。 3、为遍历不同的聚合结构提供一个统一的接口。</li>
<li>注意事项：迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><ul>
<li>UML图<br><img src="/2017/06/01/Iterator-Pattern/Iterator.png" alt="迭代器模式"></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot;迭代器模式&quot;&gt;&lt;/a&gt;迭代器模式&lt;/h2&gt;&lt;p&gt;迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Interpreter Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Interpreter-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Interpreter-Pattern/</id>
    <published>2017-06-01T04:53:01.000Z</published>
    <updated>2017-06-30T07:53:05.882Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h2><h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><p><img src="/2017/06/01/Interpreter-Pattern/Interpreter.png" alt="解释器模式"></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;解释器模式&quot;&gt;&lt;a href=&quot;#解释器模式&quot; class=&quot;headerlink&quot; title=&quot;解释器模式&quot;&gt;&lt;/a&gt;解释器模式&lt;/h2&gt;&lt;h2 id=&quot;基本代码&quot;&gt;&lt;a href=&quot;#基本代码&quot; class=&quot;headerlink&quot; title=&quot;基本代码&quot;
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Chain of Responsibility Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Chain-of-Responsibility-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Chain-of-Responsibility-Pattern/</id>
    <published>2017-06-01T04:52:38.000Z</published>
    <updated>2017-06-30T07:53:59.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h2><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p>
<p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</li>
<li>主要解决：职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，所以职责链将请求的发送者和请求的处理者解耦了。</li>
<li>何时使用：在处理消息的时候以过滤很多道。</li>
<li>如何解决：拦截的类都实现统一接口。</li>
<li>关键代码：Handler 里面聚合它自己，在 HanleRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</li>
<li>应用实例： 1、红楼梦中的”击鼓传花”。 2、JS 中的事件冒泡。 3、JAVA WEB 中 Apache Tomcat 对 Encoding 的处理，Struts2 的拦截器，jsp servlet 的 Filter。</li>
<li>优点： 1、降低耦合度。它将请求的发送者和接收者解耦。 2、简化了对象。使得对象不需要知道链的结构。 3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 4、增加新的请求处理类很方便。</li>
<li>缺点： 1、不能保证请求一定被接收。 2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 3、可能不容易观察运行时的特征，有碍于除错。</li>
<li>使用场景： 1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。 2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。 3、可动态指定一组对象处理请求。</li>
<li>注意事项：在 JAVA WEB 中遇到很多应用。<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2></li>
<li><p>UML图<br><img src="/2017/06/01/Chain-of-Responsibility-Pattern/Chain-of-Responsibility.png" alt="责任链模式"></p>
</li>
<li><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> chainOfResponsibility;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        Handler h1 = <span class="keyword">new</span> ConcreteHandler1();</div><div class="line">        Handler h2 = <span class="keyword">new</span> ConcreteHandler2();</div><div class="line">        Handler h3 = <span class="keyword">new</span> ConcreteHandler3();</div><div class="line">        <span class="comment">// 责任链的跳转在客户端设置</span></div><div class="line">        h1.setSuccessor(h2);</div><div class="line">        h2.setSuccessor(h3);</div><div class="line"></div><div class="line">        <span class="keyword">int</span>[] requests=&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">14</span>,<span class="number">22</span>,<span class="number">18</span>,<span class="number">3</span>,<span class="number">27</span>,<span class="number">20</span>&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> request : requests)&#123;</div><div class="line">            h1.HandleRequest(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>维护一个自身的对象,可以自己处理请求或者交给维护的对象处理</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> chainOfResponsibility;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Handler successor;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccessor</span><span class="params">(Handler successor)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.successor = successor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(<span class="keyword">int</span> request)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>具体实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> chainOfResponsibility;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler1</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request &gt;= <span class="number">0</span> &amp;&amp; request &lt; <span class="number">10</span>) &#123;</div><div class="line">            String temp = <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 处理 "</span> + request;</div><div class="line">            System.out.println(temp);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</div><div class="line">            successor.HandleRequest(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> chainOfResponsibility;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler2</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request &gt;= <span class="number">10</span> &amp;&amp; request &lt; <span class="number">20</span>) &#123;</div><div class="line">            String temp = <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 处理 "</span> + request;</div><div class="line">            System.out.println(temp);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</div><div class="line">            successor.HandleRequest(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">package</span> chainOfResponsibility;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteHandler3</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HandleRequest</span><span class="params">(<span class="keyword">int</span> request)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (request &gt;= <span class="number">20</span> &amp;&amp; request &lt; <span class="number">30</span>) &#123;</div><div class="line">            String temp = <span class="keyword">this</span>.getClass().getSimpleName() + <span class="string">" 处理 "</span> + request;</div><div class="line">            System.out.println(temp);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (successor != <span class="keyword">null</span>) &#123;</div><div class="line">            successor.HandleRequest(request);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul>
<li>责任链模式的跳转位置在客户端决定,状态模式的跳转在状态类内实现</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h2&gt;&lt;p&gt;顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Flyweight Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Flyweight-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Flyweight-Pattern/</id>
    <published>2017-06-01T04:52:00.000Z</published>
    <updated>2017-06-30T07:53:28.254Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：运用共享技术有效地支持大量细粒度的对象。</li>
<li>主要解决：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</li>
<li>何时使用： 1、系统中有大量对象。 2、这些对象消耗大量内存。 3、这些对象的状态大部分可以外部化。 4、这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。 5、系统不依赖于这些对象身份，这些对象是不可分辨的。</li>
<li>如何解决：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</li>
<li>关键代码：用 HashMap 存储这些对象。</li>
<li>应用实例： 1、JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面。 2、数据库的数据池。</li>
<li>优点：大大减少对象的创建，降低系统的内存，使效率提高。</li>
<li>缺点：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</li>
<li>使用场景： 1、系统有大量相似对象。 2、需要缓冲池的场景。</li>
<li>注意事项： 1、注意划分外部状态和内部状态，否则可能会引起线程安全问题。 2、这些类必须有一个工厂对象加以控制。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><p><img src="/2017/06/01/Flyweight-Pattern/Flyweight.png" alt="享元模式"></p>
<ul>
<li><p>Main</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> flyweight;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        FlyweightFactory f = <span class="keyword">new</span> FlyweightFactory();</div><div class="line">        Flyweight fx = f.getFlyweight(<span class="string">"X"</span>);</div><div class="line">        fx.operation(<span class="number">0</span>);</div><div class="line">        Flyweight fy = f.getFlyweight(<span class="string">"X"</span>);</div><div class="line">        fy.operation(<span class="number">1</span>);</div><div class="line">        Flyweight fz = f.getFlyweight(<span class="string">"Y"</span>);</div><div class="line">        fz.operation(<span class="number">2</span>);</div><div class="line"></div><div class="line">        Flyweight fus1 = <span class="keyword">new</span> UnsharedConcreteFlyweight();</div><div class="line">        fus1.operation(<span class="number">3</span>);</div><div class="line">        Flyweight fus2 = <span class="keyword">new</span> UnsharedConcreteFlyweight();</div><div class="line">        fus2.operation(<span class="number">4</span>);</div><div class="line"></div><div class="line">        <span class="comment">// flyweight.ConcreteFlyweight@6bc7c054具体的Flyweight: 0</span></div><div class="line">        <span class="comment">// flyweight.ConcreteFlyweight@6bc7c054具体的Flyweight: 1</span></div><div class="line">        <span class="comment">// flyweight.ConcreteFlyweight@232204a1具体的Flyweight: 2</span></div><div class="line">        <span class="comment">// flyweight.UnsharedConcreteFlyweight@4aa298b7不共享的具体Flyweight: 3</span></div><div class="line">        <span class="comment">// flyweight.UnsharedConcreteFlyweight@7d4991ad不共享的具体Flyweight: 4</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Flyweight</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> flyweight;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> extrinsicstate)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteFlyweight</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> flyweight;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> extrinsicstate)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>+<span class="string">"具体的Flyweight: "</span>+extrinsicstate);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>UnsharedConcreteFlyweight </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> flyweight;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsharedConcreteFlyweight</span> <span class="keyword">extends</span> <span class="title">Flyweight</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(<span class="keyword">int</span> extrinsicstate)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="keyword">this</span>+<span class="string">"不共享的具体Flyweight: "</span>+extrinsicstate);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>FlyweightFactory</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> flyweight;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Hashtable;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlyweightFactory</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Hashtable&lt;String,Flyweight&gt; flyweights = <span class="keyword">new</span> Hashtable&lt;String,Flyweight&gt;();</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlyweightFactory</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Flyweight <span class="title">getFlyweight</span><span class="params">(String key)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(!flyweights.containsKey(key))&#123;</div><div class="line">            flyweights.put(key, <span class="keyword">new</span> ConcreteFlyweight());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flyweights.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot;享元模式&quot;&gt;&lt;/a&gt;享元模式&lt;/h2&gt;&lt;p&gt;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Composite Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Composite-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Composite-Pattern/</id>
    <published>2017-06-01T04:51:46.000Z</published>
    <updated>2017-06-30T07:54:06.553Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。<br>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</li>
<li>主要解决：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</li>
<li>何时使用： 1、您想表示对象的部分-整体层次结构（树形结构）。 2、您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li>
<li>如何解决：树枝和叶子实现统一接口，树枝内部组合该接口。</li>
<li>关键代码：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</li>
<li>应用实例： 1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作树、操作符和另一个操作数。 2、在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝。</li>
<li>优点： 1、高层模块调用简单。 2、节点自由增加。</li>
<li>缺点：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</li>
<li>使用场景：部分、整体场景，如树形菜单，文件、文件夹的管理。</li>
<li>注意事项：定义时为具体类。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><ul>
<li><p>UML图<br><img src="/2017/06/01/Composite-Pattern/Composite.png" alt="组合模式"></p>
</li>
<li><p>主类测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> composite;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">// 创建一个节点root,把它视为根节点</span></div><div class="line">        Composite root = <span class="keyword">new</span> Composite(<span class="string">"root"</span>);</div><div class="line">        <span class="comment">// 为根节点添加两个叶子节点</span></div><div class="line">        root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf A"</span>));</div><div class="line">        root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf B"</span>));</div><div class="line"></div><div class="line">        <span class="comment">// 创建一个节点comp</span></div><div class="line">        Composite comp = <span class="keyword">new</span> Composite(<span class="string">"Composite X"</span>);</div><div class="line">        comp.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XA"</span>));</div><div class="line">        comp.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XB"</span>));</div><div class="line">        <span class="comment">// 将该节点设置为根节点的树枝</span></div><div class="line">        root.add(comp);</div><div class="line"></div><div class="line">        <span class="comment">// 创建一个节点comp2</span></div><div class="line">        Composite comp2 = <span class="keyword">new</span> Composite(<span class="string">"Composite XY"</span>);</div><div class="line">        comp2.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XYA"</span>));</div><div class="line">        comp2.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf XYB"</span>));</div><div class="line">        <span class="comment">// 将该节点设置为comp的树枝</span></div><div class="line">        comp.add(comp2);</div><div class="line"></div><div class="line">        <span class="comment">// 再添加一个节点</span></div><div class="line">        root.add(<span class="keyword">new</span> Leaf(<span class="string">"Leaf C"</span>));</div><div class="line"></div><div class="line">        <span class="comment">// 创建一个叶节点leaf</span></div><div class="line">        Leaf leaf = <span class="keyword">new</span> Leaf(<span class="string">"Leaf D"</span>);</div><div class="line">        <span class="comment">// 设置为根的叶节点</span></div><div class="line">        root.add(leaf);</div><div class="line">        <span class="comment">// 移除</span></div><div class="line">        root.remove(leaf);</div><div class="line"></div><div class="line">        <span class="comment">// 显示,设置根节点depth为1</span></div><div class="line">        root.display(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>抽象构件角色</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> composite;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 抽象构件角色</div><div class="line">     * */</div><div class="line">    <span class="keyword">protected</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Component</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>树枝构件角色</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> composite;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Vector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Composite</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 树枝构件角色</div><div class="line">     * */</div><div class="line">    <span class="keyword">private</span> Vector&lt;Component&gt; children = <span class="keyword">new</span> Vector&lt;Component&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Composite</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">        children.add(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">        children.remove(c);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</div><div class="line">        <span class="comment">// temp保存depth个'-'</span></div><div class="line">        String temp=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;depth;i++)&#123;</div><div class="line">            temp=temp+<span class="string">"-"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(temp+<span class="keyword">super</span>.name);</div><div class="line">        <span class="comment">// 递归显示节点</span></div><div class="line">        <span class="keyword">for</span>(Component c:children)&#123;</div><div class="line">            c.display(depth+<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>树叶构建角色</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> composite;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Leaf</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 树叶构件角色</div><div class="line">     * */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Leaf</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Cannot add to a leaf"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(Component c)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Cannot remove from a leaf"</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(<span class="keyword">int</span> depth)</span> </span>&#123;</div><div class="line">        String temp=<span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;depth;i++)&#123;</div><div class="line">            temp=temp+<span class="string">"-"</span>;</div><div class="line">        &#125;</div><div class="line">        System.out.println(temp+<span class="keyword">super</span>.name);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot;组合模式&quot;&gt;&lt;/a&gt;组合模式&lt;/h2&gt;&lt;p&gt;组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Bridge Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Bridge-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Bridge-Pattern/</id>
    <published>2017-06-01T04:51:33.000Z</published>
    <updated>2017-06-30T07:53:46.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。<br>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：将抽象部分与实现部分分离，使它们都可以独立的变化。</li>
<li>主要解决：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</li>
<li>何时使用：实现系统可能有多个角度分类，每一种角度都可能变化。</li>
<li>如何解决：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</li>
<li>关键代码：抽象类依赖实现类。</li>
<li>应用实例： 1、猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择。 2、墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的。</li>
<li>优点： 1、抽象和实现的分离。 2、优秀的扩展能力。 3、实现细节对客户透明。</li>
<li>缺点：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</li>
<li>使用场景： 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</li>
<li>注意事项：对于两个独立变化的维度，使用桥接模式再适合不过了。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><ul>
<li><p>UML图<br><img src="/2017/06/01/Bridge-Pattern/Bridge.png" alt="桥接模式"></p>
</li>
<li><p>主类测试</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bridge;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="comment">//Abstraction ab = new Abstraction();</span></div><div class="line">        Abstraction ab = <span class="keyword">new</span> RefinedAbstraction(); </div><div class="line">        ab.setImplementor(<span class="keyword">new</span> ConcreteImplementorA());</div><div class="line">        ab.Operation();</div><div class="line">        ab.setImplementor(<span class="keyword">new</span> ConcreteImplementorB());</div><div class="line">        ab.Operation();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接口 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bridge;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>两个该接口的具体实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bridge;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorA</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"具体实现A的方法执行"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> bridge;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteImplementorB</span> <span class="keyword">extends</span> <span class="title">Implementor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"具体实现B的方法执行"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过组合聚合,而非继承,调用接口中的方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bridge;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> Implementor implementor;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImplementor</span><span class="params">(Implementor implementor)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.implementor = implementor;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span></span>&#123;</div><div class="line">        implementor.Operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>精简上面的类,方便扩充</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> bridge;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * Abstraction已经可以调用Implementor中的方法</div><div class="line"> * 扩展Abstracition,实现RefinedAbstraction</div><div class="line"> * 为日后扩展与RefinedAbstarction同级的类提供方便</div><div class="line"> * */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefinedAbstraction</span> <span class="keyword">extends</span> <span class="title">Abstraction</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Operation</span><span class="params">()</span> </span>&#123;</div><div class="line">        implementor.Operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot;桥接模式&quot;&gt;&lt;/a&gt;桥接模式&lt;/h2&gt;&lt;p&gt;桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Builder Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Builder-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Builder-Pattern/</id>
    <published>2017-06-01T04:51:19.000Z</published>
    <updated>2017-06-30T07:53:50.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</li>
<li>主要解决：主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</li>
<li>何时使用：一些基本部件不会变，而其组合经常变化的时候。</li>
<li>如何解决：将变与不变分离开。</li>
<li>关键代码：建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</li>
<li>应用实例： 1、去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的”套餐”。 2、JAVA 中的 StringBuilder。</li>
<li>优点： 1、建造者独立，易扩展。 2、便于控制细节风险。</li>
<li>缺点： 1、产品必须有共同点，范围有限制。 2、如内部变化复杂，会有很多的建造类。</li>
<li>使用场景： 1、需要生成的对象具有复杂的内部结构。 2、需要生成的对象内部属性本身相互依赖。</li>
<li>注意事项：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2></li>
<li><p>UML图<br><img src="/2017/06/01/Builder-Pattern/Builder.png" alt="建造者模式"></p>
</li>
<li><p>Main</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> builder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		Director director = <span class="keyword">new</span> Director();</div><div class="line">		</div><div class="line">		Builder b1 = <span class="keyword">new</span> ConcreteBuilder1();</div><div class="line">		Builder b2 = <span class="keyword">new</span> ConcreteBuilder2();</div><div class="line">		</div><div class="line">		director.construct(b1);</div><div class="line">		director.construct(b2);</div><div class="line">		</div><div class="line">		Product p1 = b1.getResult();</div><div class="line">		Product p2 = b2.getResult();</div><div class="line">		</div><div class="line">		p1.show();</div><div class="line">		p2.show();</div><div class="line">		</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Product</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> builder;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Vector;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Vector&lt;String&gt; parts = <span class="keyword">new</span> Vector&lt;String&gt;();</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String part)</span></span>&#123;</div><div class="line">		parts.add(part);</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</div><div class="line">		System.out.println(<span class="string">"产品 创建----"</span>);</div><div class="line">		<span class="keyword">for</span>(String part:parts)&#123;</div><div class="line">			System.out.println(part);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Builder</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> builder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">builderPartA</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">builderPartB</span><span class="params">()</span></span>;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Product <span class="title">getResult</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>ConcreteBuilder</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> builder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder1</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderPartA</span><span class="params">()</span> </span>&#123;</div><div class="line">		product.add(<span class="string">"部件A"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderPartB</span><span class="params">()</span> </span>&#123;</div><div class="line">		product.add(<span class="string">"部件B"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> product;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">package</span> builder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteBuilder2</span> <span class="keyword">extends</span> <span class="title">Builder</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> Product product = <span class="keyword">new</span> Product();</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderPartA</span><span class="params">()</span> </span>&#123;</div><div class="line">		product.add(<span class="string">"部件X"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderPartB</span><span class="params">()</span> </span>&#123;</div><div class="line">		product.add(<span class="string">"部件Y"</span>);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Product <span class="title">getResult</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> product;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Director</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> builder;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Director</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">construct</span><span class="params">(Builder builder)</span></span>&#123;</div><div class="line">		builder.builderPartA();</div><div class="line">		builder.builderPartB();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot;建造者模式&quot;&gt;&lt;/a&gt;建造者模式&lt;/h2&gt;&lt;p&gt;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Singleton Pattern</title>
    <link href="https://www.nierunjie.site/2017/06/01/Singleton-Pattern/"/>
    <id>https://www.nierunjie.site/2017/06/01/Singleton-Pattern/</id>
    <published>2017-06-01T04:51:02.000Z</published>
    <updated>2017-06-30T07:44:08.028Z</updated>
    
    <content type="html"><![CDATA[<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><ol>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
</ol>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul>
<li>意图：保证一个类仅有一个实例，并提供一个访问它的全局访问点。</li>
<li>主要解决：一个全局使用的类频繁地创建与销毁。</li>
<li>何时使用：当您想控制实例数目，节省系统资源的时候。</li>
<li>如何解决：判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</li>
<li>关键代码：构造函数是私有的。</li>
<li>应用实例： 1、一个党只能有一个主席。 2、Windows 是多进程多线程的，在操作一个文件的时候，就不可避免地出现多个进程或线程同时操作一个文件的现象，所以所有文件的处理必须通过唯一的实例来进行。 3、一些设备管理器常常设计为单例模式，比如一个电脑有两台打印机，在输出的时候就要处理不能两台打印机打印同一个文件。</li>
<li>优点： 1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。 2、避免对资源的多重占用（比如写文件操作）。</li>
<li>缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</li>
<li>使用场景： 1、要求生产唯一序列号。 2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。 3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</li>
<li>注意事项：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</li>
</ul>
<h2 id="基本代码"><a href="#基本代码" class="headerlink" title="基本代码"></a>基本代码</h2><ul>
<li><p>UML图<br><img src="/2017/06/01/Singleton-Pattern/Singleton.png" alt="单例模式"></p>
</li>
<li><p>懒汉式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> singleton;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * (浪费)时间换(节省)空间 懒汉式</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Singleton();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>饿汉式</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> singleton;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * (浪费)空间换(节省)时间 饿汉式</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>关于通过反射调用对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> singleton;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Method;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">    </div><div class="line">        Class&lt;?&gt; c1= Class.forName(<span class="string">"singleton.Singleton"</span>);</div><div class="line">        Method method1 = c1.getMethod(<span class="string">"getInstance"</span>);</div><div class="line">        Singleton s1 = (Singleton) method1.invoke(<span class="keyword">null</span>);</div><div class="line">        System.out.println(s1); <span class="comment">// singleton.Singleton@232204a1</span></div><div class="line">         </div><div class="line">        Class&lt;?&gt; c2= Class.forName(<span class="string">"singleton.Singleton"</span>);</div><div class="line">        Method method2 = c2.getMethod(<span class="string">"getInstance"</span>); </div><div class="line">        Singleton s2 = (Singleton) method2.invoke(<span class="keyword">null</span>);</div><div class="line">        System.out.println(s2); <span class="comment">// singleton.Singleton@232204a1</span></div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>反射不破坏单例模式特性</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h2&gt;&lt;p&gt;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供
    
    </summary>
    
      <category term="设计模式" scheme="https://www.nierunjie.site/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://www.nierunjie.site/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>R语言非线性回归</title>
    <link href="https://www.nierunjie.site/2017/05/27/R%E8%AF%AD%E8%A8%80%E9%9D%9E%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>https://www.nierunjie.site/2017/05/27/R语言非线性回归/</id>
    <published>2017-05-27T03:02:56.000Z</published>
    <updated>2017-06-30T07:45:10.628Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li><p>非线性最小二乘拟合</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成一些仿真数据</span></div><div class="line">set.seed(<span class="number">20170527</span>)  </div><div class="line">x &lt;- seq(<span class="number">0</span>, <span class="number">50</span>, <span class="number">1</span>)</div><div class="line">y &lt;- ((runif(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>)*x)/(runif(<span class="number">1</span>, <span class="number">0</span>, <span class="number">10</span>)+x)) + rnorm(<span class="number">51</span>, <span class="number">0</span>, <span class="number">1</span>)</div><div class="line"><span class="comment"># 对于一些简单的模型，nls函数可以自动找到合适的参数初值</span></div><div class="line">m &lt;- nls(y ~ a*x/(b+x))</div><div class="line"><span class="comment"># 计算模型的拟合优度</span></div><div class="line">cor(y, predict(m))</div><div class="line"><span class="comment"># [1] 0.96535</span></div><div class="line"><span class="comment"># 将结果可视化</span></div><div class="line">plot(x, y) </div><div class="line">lines(x, predict(m), lty = <span class="number">2</span>, col = <span class="string">"red"</span>, lwd = <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p><img src="/2017/05/27/R语言非线性回归/1.png" alt="最小二乘拟合"></p>
</li>
<li><p>选择适宜的迭代初值</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 生成仿真数据，并且此次对于参数没有先验信息</span></div><div class="line">y &lt;- runif(<span class="number">1</span>, <span class="number">5</span>, <span class="number">15</span>)*exp(-runif(<span class="number">1</span>, <span class="number">0.01</span>, <span class="number">0.05</span>)*x) + rnorm(<span class="number">51</span>, <span class="number">0</span>, <span class="number">0.5</span>)</div><div class="line"><span class="comment"># 可视化数据并选择一些参数初值</span></div><div class="line">plot(x, y)</div><div class="line"></div><div class="line"><span class="comment"># 如果不设置初值,直接拟合</span></div><div class="line">m &lt;- nls(y ~ a*exp(-b*x))</div><div class="line"><span class="comment"># 拟合度过低</span></div><div class="line">cor(y, predict(m))</div><div class="line"><span class="comment"># [1] 0.0637522</span></div><div class="line">lines(x, predict(m), col = <span class="string">"green"</span>, lty = <span class="number">2</span>, lwd = <span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="comment"># 通过这个散点图确定参数a, b的初值</span></div><div class="line">a_start &lt;- <span class="number">8</span> <span class="comment"># 参数a是x = 0时y的取值</span></div><div class="line">b_start&lt;- <span class="number">2</span>*log(<span class="number">2</span>)/a_start <span class="comment"># b 是衰减速率</span></div><div class="line"><span class="comment"># 拟合模型</span></div><div class="line">m &lt;- nls(y ~ a*exp(-b*x), start = list(a = a_start, b = b_start))</div><div class="line"></div><div class="line"><span class="comment"># 计算拟合优度</span></div><div class="line">cor(y, predict(m))</div><div class="line"><span class="comment"># [1] 0.930365</span></div><div class="line"><span class="comment"># 将结果可视化</span></div><div class="line">lines(x, predict(m), col = <span class="string">"red"</span>, lty = <span class="number">2</span>, lwd = <span class="number">3</span>)</div></pre></td></tr></table></figure>
<p><img src="/2017/05/27/R语言非线性回归/2.png" alt="设置初值与不设置初值的拟合"></p>
</li>
<li><p>使用自启动函数</p>
<ul>
<li><p>这部分代码只是生成了带有随机误差的仿真数据 </p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">library</span>(deSolve)</div><div class="line"><span class="comment"># 利用逻辑斯蒂模型生成人口增长的仿真数据，并用nls估计参数</span></div><div class="line">log_growth &lt;- <span class="keyword">function</span>(Time, State, Pars) &#123;</div><div class="line">    with(as.list(c(State, Pars)), &#123;</div><div class="line">        dN &lt;- R*N*(<span class="number">1</span>-N/K)</div><div class="line">        <span class="keyword">return</span>(list(c(dN)))</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line"><span class="comment"># 逻辑斯蒂增长的参数</span></div><div class="line">pars  &lt;- c(R = <span class="number">0.2</span>, K = <span class="number">1000</span>)</div><div class="line"><span class="comment"># 设定初值</span></div><div class="line">N_ini  &lt;- c(N = <span class="number">1</span>)</div><div class="line"><span class="comment"># 常微分方程的时间阶段（下标t）</span></div><div class="line">times &lt;- seq(<span class="number">0</span>, <span class="number">50</span>, by = <span class="number">1</span>)</div><div class="line"><span class="comment"># 常微分方程</span></div><div class="line">out &lt;- ode(N_ini, times, log_growth, pars)</div><div class="line"><span class="comment"># 添加一些随机波动</span></div><div class="line">N_obs &lt;- out[, <span class="number">2</span>]+rnorm(<span class="number">51</span>, <span class="number">0</span>, <span class="number">50</span>)</div><div class="line"><span class="comment"># 个体数值不能小于1</span></div><div class="line">N_obs &lt;- ifelse(N_obs&lt;<span class="number">1</span>, <span class="number">1</span>, N_obs)</div><div class="line"><span class="comment"># 画图</span></div><div class="line">plot(times, N_obs)</div></pre></td></tr></table></figure>
</li>
<li><p>接下来的部分会展现估计参数初值的技巧。R语言中有一个估计逻辑斯蒂方程参数的内建函数（SSlogis），但它使用的是如下方程：</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 寻找方程的参数</span></div><div class="line">SS &lt;- getInitial(N_obs ~ SSlogis(times, alpha, xmid, scale), data = data.frame(N_obs = N_obs, times = times))</div></pre></td></tr></table></figure>
</li>
<li><p>我们可使用getInitial函数来对模型参数做一个基于数据的初步估计。然后把该函数的输出作为一个向量化参数传递给自启动函数（SSlogis），同时也将无引号的三个参数名赋值给逻辑斯蒂方程（译者注：即alpha，xmid，scale三个参数）。然而，由于SSlogis的参数设定有些不同，我们需要对SSlogis的输出值做一些处理，使得其与逻辑斯蒂方程中的形式一致。</p>
<figure class="highlight r"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 改变参数形式</span></div><div class="line">K_start &lt;- SS[<span class="string">"alpha"</span>]</div><div class="line">R_start &lt;- <span class="number">1</span>/SS[<span class="string">"scale"</span>]</div><div class="line">N0_start &lt;- SS[<span class="string">"alpha"</span>]/(exp(SS[<span class="string">"xmid"</span>]/SS[<span class="string">"scale"</span>])+<span class="number">1</span>)</div><div class="line"><span class="comment"># 构建模型的公式</span></div><div class="line">log_formula &lt;- formula(N_obs ~ K*N0*exp(R*times)/(K + N0*(exp(R*times) - <span class="number">1</span>)))</div><div class="line"><span class="comment"># 拟合模型</span></div><div class="line">m &lt;- nls(log_formula, start = list(K = K_start, R = R_start, N0 = N0_start))</div><div class="line"><span class="comment"># 估计参数</span></div><div class="line">summary(m)</div><div class="line"><span class="comment">#    Formula: N_obs ~ K * N0 * exp(R * times)/(K + N0 * (exp(R * times) - 1))</span></div><div class="line"><span class="comment">#    Parameters:</span></div><div class="line"><span class="comment">#     Estimate Std. Error t value Pr(&gt;|t|)    </span></div><div class="line"><span class="comment">#    K  1.012e+03  3.446e+01  29.366   &lt;2e-16 ***</span></div><div class="line"><span class="comment">#    R  2.010e-01  1.504e-02  13.360   &lt;2e-16 ***</span></div><div class="line"><span class="comment">#    N0 9.600e-01  4.582e-01   2.095   0.0415 *  </span></div><div class="line"><span class="comment">#    ---</span></div><div class="line"><span class="comment">#    Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1</span></div><div class="line"></div><div class="line"><span class="comment">#    Residual standard error: 49.01 on 48 degrees of freedom</span></div><div class="line"></div><div class="line"><span class="comment">#    Number of iterations to convergence: 1 </span></div><div class="line"><span class="comment">#    Achieved convergence tolerance: 1.537e-06</span></div><div class="line"></div><div class="line"><span class="comment"># 计算拟合优度</span></div><div class="line">cor(N_obs,predict(m))</div><div class="line"></div><div class="line"><span class="comment"># [1] 0.9910316</span></div><div class="line"></div><div class="line"><span class="comment"># 结果可视化</span></div><div class="line">lines(times, predict(m), col = <span class="string">"red"</span>, lty = <span class="number">2</span>, lwd = <span class="number">3</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="/2017/05/27/R语言非线性回归/3.png" alt="使用自启动函数拟合结果"></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;非线性最小二乘拟合&lt;/p&gt;
&lt;figure class=&quot;highlight r&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;
    
    </summary>
    
      <category term="R语言" scheme="https://www.nierunjie.site/categories/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="R语言" scheme="https://www.nierunjie.site/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
